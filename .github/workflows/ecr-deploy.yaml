name: Build, Push, Deploy

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    name: Build and push to ECR
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to ECR
      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REPOSITORY_URI: ${{ vars.ECR_REPOSITORY_URI }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_URI

      # Step 3: Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t ${{ vars.ECR_REPOSITORY }}:latest .

      # Step 4: Tag the Docker image
      - name: Tag Docker Image
        run: |
          docker tag ${{ vars.ECR_REPOSITORY }}:latest ${{ vars.ECR_REPOSITORY_URI }}:latest

      # Step 5: Push the Docker image to ECR
      - name: Push Docker Image to Amazon ECR
        run: |
          docker push ${{ vars.ECR_REPOSITORY_URI }}:latest

  deploy_to_eks:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ vars.CLUSTER_NAME }}

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Check files before applying
      run: |
        ls .
        cat deployment.yaml
        cat service.yaml
    
    - name: Deploy service and deployment
      run: |
        echo "Applying deployment.yaml"
        kubectl apply -f deployment.yaml
        echo "Applying service.yaml"
        kubectl apply -f service.yaml

    - name: Deploy new image to EKS
      env:
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        K8S_NAMESPACE: ${{ vars.K8S_NAMESPACE }}
        ECR_REPOSITORY_URI: ${{ vars.ECR_REPOSITORY_URI }}
      run: |
        kubectl set image deployment/block-xplorer-deployment block-xplorer=${{ vars.ECR_REPOSITORY_URI }}:latest -n $K8S_NAMESPACE
        kubectl rollout restart deployment/block-xplorer-deployment -n $K8S_NAMESPACE

    
    
    # - name: Check for changes in deployment.yaml
    #   id: check_deployment
    #   run: |
    #     if git diff --name-only HEAD^ HEAD | grep -E '^deployment.yaml$'; then
    #       echo "deployment_changed=true" >> $GITHUB_ENV
    #     else
    #       echo "deployment_changed=false" >> $GITHUB_ENV
    #     fi

    # - name: Check for changes in service.yaml
    #   id: check_service
    #   run: |
    #     if git diff --name-only HEAD^ HEAD | grep -E '^service.yaml$'; then
    #       echo "service_changed=true" >> $GITHUB_ENV
    #     else
    #       echo "service_changed=false" >> $GITHUB_ENV
    #     fi

    # - name: Apply deployment if changed
    #   if: env.deployment_changed == 'true'
    #   run: |
    #     echo "Applying deployment.yaml"
    #     kubectl apply -f deployment.yaml

    # - name: Apply service if changed
    #   if: env.service_changed == 'true'
    #   run: |
    #     echo "Applying service.yaml"
    #     kubectl apply -f service.yaml
